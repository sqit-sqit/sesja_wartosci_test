# podsumowanie.py

import streamlit as st
from openai import OpenAI

def pokaz_podsumowanie(api_key):
    st.title("üìò Podsumowanie Twojego procesu")

    user_values = st.session_state.get("user_values", [])[:3]  # ostatnie 3 najwa≈ºniejsze warto≈õci
    if not user_values:
        st.warning("Brak wystarczajƒÖcej liczby warto≈õci do podsumowania.")
        return

    st.markdown("#### üåü Twoje trzy najwa≈ºniejsze warto≈õci:")
    for val in user_values:
        st.markdown(f"- **{val}**")

    # System prompt do AI
    system_prompt = (
        "Jeste≈õ do≈õwiadczonym coachem i mentorem. "
        "U≈ºytkownik zako≈Ñczy≈Ç g≈Çƒôboki proces refleksji i odkrywania warto≈õci. "
        f"Jego trzy najwa≈ºniejsze warto≈õci to: {', '.join(user_values)}.\n\n"
        "Napisz empatyczne i inspirujƒÖce podsumowanie, kt√≥re wzmacnia jego wybory i dodaje otuchy. "
        "Zaproponuj konkretne dzia≈Çania (action items), kt√≥re pomogƒÖ mu wdro≈ºyƒá te warto≈õci w codzienne ≈ºycie."
    )

    # Inicjalizacja klienta
    client = OpenAI(api_key=api_key)

    with st.spinner("AI tworzy dla Ciebie podsumowanie..."):
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": "Proszƒô o podsumowanie mojego procesu i konkretne dzia≈Çania."}
            ]
        )

    output = response.choices[0].message.content
    usage = response.usage

    # Zapis do historii i koszt√≥w
    st.session_state["messages"].append({
        "role": "assistant",
        "content": output,
        "usage": {
            "completion_tokens": usage.completion_tokens,
            "prompt_tokens": usage.prompt_tokens,
            "total_tokens": usage.total_tokens
        }
    })

    # Wy≈õwietlenie
    st.markdown("---")
    st.markdown(output)
